// Automatically generated by the task generatePeekingIters

@file:JvmMultifileClass
@file:JvmName("PeekingIteratorKt")

package com.kotakotik.kotalin.peeking


import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName

/**
 * A [PeekingIterator] that iterates over [Long]s without boxing
 * @see PeekingIterator, LongIterator
*/
class PeekingLongIterator(private val innerIter: LongIterator) : LongIterator(), PeekingIterator<Long> {
    private var peeked: Long = 0
    private var hasPeeked = false
    
    /**
     * Peeks the next element without boxing
     * @see peek
    */
    fun peekLong(): Long {
        if(!hasPeeked) {
            hasPeeked = true
            peeked = innerIter.nextLong()
        }
        return peeked
    }
    
    override fun peek() = peekLong()
    
    override fun nextLong() = if(hasPeeked) {
        hasPeeked = false
        peeked
    } else {
        innerIter.nextLong()
    }
    
    override fun hasNext() =
        hasPeeked || innerIter.hasNext()
}

/**
 * Creates a new [PeekingLongIterator] wrapping around this iterator
 *
 * @see PeekingIterator, PeekingLongIterator
 */
fun LongIterator.peeking() =
    PeekingLongIterator(this)