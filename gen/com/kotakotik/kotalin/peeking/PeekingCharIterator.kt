// Automatically generated by the task generatePeekingIters

@file:JvmMultifileClass
@file:JvmName("PeekingIteratorKt")

package com.kotakotik.kotalin.peeking


import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName

/**
 * A [PeekingIterator] that iterates over [Char]s without boxing
 * @see PeekingIterator, CharIterator
*/
class PeekingCharIterator(private val innerIter: CharIterator) : CharIterator(), PeekingIterator<Char> {
    private var peeked: Char = Char.MIN_VALUE
    private var hasPeeked = false
    
    /**
     * Peeks the next element without boxing
     * @see peek
    */
    fun peekChar(): Char {
        if(!hasPeeked) {
            hasPeeked = true
            peeked = innerIter.nextChar()
        }
        return peeked
    }
    
    override fun peek() = peekChar()
    
    override fun nextChar() = if(hasPeeked) {
        hasPeeked = false
        peeked
    } else {
        innerIter.nextChar()
    }
    
    override fun hasNext() =
        hasPeeked || innerIter.hasNext()
}

/**
 * Creates a new [PeekingCharIterator] wrapping around this iterator
 *
 * @see PeekingIterator, PeekingCharIterator
 */
fun CharIterator.peeking() =
    PeekingCharIterator(this)