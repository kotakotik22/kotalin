// Automatically generated by the task generatePeekingIters

@file:JvmMultifileClass
@file:JvmName("PeekingIteratorKt")

package com.kotakotik.kotalin.peeking


import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName

/**
 * A [PeekingIterator] that iterates over [Float]s without boxing
 * @see PeekingIterator, FloatIterator
*/
class PeekingFloatIterator(private val innerIter: FloatIterator) : FloatIterator(), PeekingIterator<Float> {
    private var peeked: Float = 0f
    private var hasPeeked = false
    
    /**
     * Peeks the next element without boxing
     * @see peek
    */
    fun peekFloat(): Float {
        if(!hasPeeked) {
            hasPeeked = true
            peeked = innerIter.nextFloat()
        }
        return peeked
    }
    
    override fun peek() = peekFloat()
    
    override fun nextFloat() = if(hasPeeked) {
        hasPeeked = false
        peeked
    } else {
        innerIter.nextFloat()
    }
    
    override fun hasNext() =
        hasPeeked || innerIter.hasNext()
}

/**
 * Creates a new [PeekingFloatIterator] wrapping around this iterator
 *
 * @see PeekingIterator, PeekingFloatIterator
 */
fun FloatIterator.peeking() =
    PeekingFloatIterator(this)