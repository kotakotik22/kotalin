// Automatically generated by the task generatePeekingIters

@file:JvmMultifileClass
@file:JvmName("PeekingIteratorKt")

package com.kotakotik.kotalin.peeking

import com.kotakotik.kotalin.iterator.UIntIterator
import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName

/**
 * A [PeekingIterator] that iterates over [UInt]s without boxing
 * @see PeekingIterator, UIntIterator
*/
class PeekingUIntIterator(private val innerIter: UIntIterator) : UIntIterator(), PeekingIterator<UInt> {
    private var peeked: UInt = 0u
    private var hasPeeked = false
    
    /**
     * Peeks the next element without boxing
     * @see peek
    */
    fun peekUInt(): UInt {
        if(!hasPeeked) {
            hasPeeked = true
            peeked = innerIter.nextUInt()
        }
        return peeked
    }
    
    override fun peek() = peekUInt()
    
    override fun nextUInt() = if(hasPeeked) {
        hasPeeked = false
        peeked
    } else {
        innerIter.nextUInt()
    }
    
    override fun hasNext() =
        hasPeeked || innerIter.hasNext()
}

/**
 * Creates a new [PeekingUIntIterator] wrapping around this iterator
 *
 * @see PeekingIterator, PeekingUIntIterator
 */
fun UIntIterator.peeking() =
    PeekingUIntIterator(this)