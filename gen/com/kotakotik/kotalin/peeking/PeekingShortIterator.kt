// Automatically generated by the task generatePeekingIters

@file:JvmMultifileClass
@file:JvmName("PeekingIteratorKt")

package com.kotakotik.kotalin.peeking


import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName

/**
 * A [PeekingIterator] that iterates over [Short]s without boxing
 * @see PeekingIterator, ShortIterator
*/
class PeekingShortIterator(private val innerIter: ShortIterator) : ShortIterator(), PeekingIterator<Short> {
    private var peeked: Short = 0
    private var hasPeeked = false
    
    /**
     * Peeks the next element without boxing
     * @see peek
    */
    fun peekShort(): Short {
        if(!hasPeeked) {
            hasPeeked = true
            peeked = innerIter.nextShort()
        }
        return peeked
    }
    
    override fun peek() = peekShort()
    
    override fun nextShort() = if(hasPeeked) {
        hasPeeked = false
        peeked
    } else {
        innerIter.nextShort()
    }
    
    override fun hasNext() =
        hasPeeked || innerIter.hasNext()
}

/**
 * Creates a new [PeekingShortIterator] wrapping around this iterator
 *
 * @see PeekingIterator, PeekingShortIterator
 */
fun ShortIterator.peeking() =
    PeekingShortIterator(this)