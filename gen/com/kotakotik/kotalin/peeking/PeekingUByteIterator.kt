// Automatically generated by the task generatePeekingIters

@file:JvmMultifileClass
@file:JvmName("PeekingIteratorKt")

package com.kotakotik.kotalin.peeking

import com.kotakotik.kotalin.iterator.UByteIterator
import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName

/**
 * A [PeekingIterator] that iterates over [UByte]s without boxing
 * @see PeekingIterator, UByteIterator
*/
class PeekingUByteIterator(private val innerIter: UByteIterator) : UByteIterator(), PeekingIterator<UByte> {
    private var peeked: UByte = 0u
    private var hasPeeked = false
    
    /**
     * Peeks the next element without boxing
     * @see peek
    */
    fun peekUByte(): UByte {
        if(!hasPeeked) {
            hasPeeked = true
            peeked = innerIter.nextUByte()
        }
        return peeked
    }
    
    override fun peek() = peekUByte()
    
    override fun nextUByte() = if(hasPeeked) {
        hasPeeked = false
        peeked
    } else {
        innerIter.nextUByte()
    }
    
    override fun hasNext() =
        hasPeeked || innerIter.hasNext()
}

/**
 * Creates a new [PeekingUByteIterator] wrapping around this iterator
 *
 * @see PeekingIterator, PeekingUByteIterator
 */
fun UByteIterator.peeking() =
    PeekingUByteIterator(this)