// Automatically generated by the task generatePeekingIters

@file:JvmMultifileClass
@file:JvmName("PeekingIteratorKt")

package com.kotakotik.kotalin.peeking

import com.kotakotik.kotalin.iterator.ULongIterator
import kotlin.jvm.JvmMultifileClass
import kotlin.jvm.JvmName

/**
 * A [PeekingIterator] that iterates over [ULong]s without boxing
 * @see PeekingIterator, ULongIterator
*/
class PeekingULongIterator(private val innerIter: ULongIterator) : ULongIterator(), PeekingIterator<ULong> {
    private var peeked: ULong = 0u
    private var hasPeeked = false
    
    /**
     * Peeks the next element without boxing
     * @see peek
    */
    fun peekULong(): ULong {
        if(!hasPeeked) {
            hasPeeked = true
            peeked = innerIter.nextULong()
        }
        return peeked
    }
    
    override fun peek() = peekULong()
    
    override fun nextULong() = if(hasPeeked) {
        hasPeeked = false
        peeked
    } else {
        innerIter.nextULong()
    }
    
    override fun hasNext() =
        hasPeeked || innerIter.hasNext()
}

/**
 * Creates a new [PeekingULongIterator] wrapping around this iterator
 *
 * @see PeekingIterator, PeekingULongIterator
 */
fun ULongIterator.peeking() =
    PeekingULongIterator(this)