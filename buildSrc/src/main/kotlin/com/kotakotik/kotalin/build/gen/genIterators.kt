package com.kotakotik.kotalin.build.gen

import com.kotakotik.kotalin.build.genDir
import com.kotakotik.kotalin.build.primitives
import org.gradle.api.Project

internal fun Project.genIterators() {
    for(primitive in primitives)
        if(primitive.customIterator) {
            file("$genDir/iterator/${primitive.name}Iterator.kt").writeText("""
                // Automatically generated by the task generateIterators
                
                @file:JvmMultifileClass
                @file:JvmName("PrimitiveItersKt")
                
                package com.kotakotik.kotalin.iterator
                
                import kotlin.jvm.JvmMultifileClass
                import kotlin.jvm.JvmName
                
                /** An iterator over a sequence of values of type `${primitive.name}`. */
                abstract class ${primitive.name}Iterator : Iterator<${primitive.name}> {
                    final override fun next() = next${primitive.name}()
                    
                    /** Returns the next value in the sequence without boxing. */
                    abstract fun next${primitive.name}(): ${primitive.name}
                }
            """.trimIndent())
        }
}